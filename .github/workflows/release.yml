name: package and publish

on:
  push:
    tags:
      - VERSION*

jobs:
  package-and-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup git config
        run: |
          git config --global --add safe.directory /__w/dara/dara
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"  
      - uses: snok/install-poetry@v1
        with:
          version: 1.8.3
      - name: Install Anthology
        run: poetry self add anthology 
      - name: Setup cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
            path: .venv
            key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Python venv if cache was not found
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
            poetry anthology install
        env:
            POETRY_HTTP_BASIC_CAUSALENS_USERNAME: '${{ secrets.GAR_USERNAME }}'
            POETRY_HTTP_BASIC_CAUSALENS_PASSWORD: '${{ secrets.GAR_KEY }}'
      - name: Link venvs if cache was hit
        if: steps.cached-poetry-dependencies.outputs.cache-hit == 'true'
        run: make link
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install project dependencies
        run: make deps-project
      # Extract current and tag versions so that we can do version bump in the right places.
      - name: Extract tags (versions)
        id: extract_tag
        shell: bash
        run: |
            echo "version=$(git describe --tags --exact-match $GITHUB_SHA)" >> $GITHUB_OUTPUT
      - name: Set version in the toml file
        id: set_version
        shell: python
        run: poetry anthology version ${{ steps.extract_tag.outputs.version }}
      - name: Parse and resolve changelog
        id: set-changelog
        run: |i
          echo "::set-output name=changelog::$(tooling/changelog-parser/main.js ${{ steps.set-version.outputs.version }})"
      - name: Update READMEs to work on PyPi before publishing
        run: |
          poetry run python ./tooling/scripts/update-readmes.py ${{ github.ref_name }}
      - name: Prepare resources required for packaging
        run: make prepare
      - name: Make packages
        run: make run script=package
      - name: Publish packages
        run: make publish
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
          NPMJS_TOKEN: ${{ secrets.NPMJS_TOKEN }}
      - name: Package and Publish Docs
        run: make publish-docs
        env:
          PACKAGE: dara
          VERSION: ${{ steps.set-version.outputs.version }}
          PACKAGE_PATHS: |
            packages/create-dara-app/create_dara_app
            packages/dara-components/dara.components
            packages/dara-core/dara.core
          BUILD_REFERENCE: true
          ARTIFACTORY_URL: https://causalens.jfrog.io/artifactory
          ARTIFACTORY_USERNAME: ${{ secrets.JF_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.JF_PASSWORD }}
          ARTIFACTORY_REPOSITORY: documentation
      - name: Commit version bump
              run: |
                    git config --global --add safe.directory .
                    git add .
                    git commit -m "Version bump to ${{ steps.extract_tag.outputs.new_version }}"
      - uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              username: 'action-slack',
              blocks: [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Dara changelog for tag ${{ steps.set-version.outputs.version }}"
                  }
                },
                ...(${{ steps.set-changelog.outputs.changelog }}.map(section => ({
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": section
                  }
                })))
              ]
            }
        env:
          SLACK_WEBHOOK_URL: "${{ secrets.SLACK_TECH_TEAM_CHANNEL_WEBHOOK }}"
